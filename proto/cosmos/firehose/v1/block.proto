syntax = "proto3";
package cosmos.firehose.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "tendermint/abci/types.proto";
import "tendermint/types/params.proto";
import "tendermint/types/types.proto";

option go_package = "github.com/cosmos/cosmos-sdk/store/streaming/firehose";

// Firehose-centric Block
message Block {
  tendermint.types.Header header = 1;
  RequestFinalizeBlock req = 2;
  ResponseFinalizeBlock res = 3;
  reserved 4; //repeated StoreKVPair changeSet = 4;
}

// Implementation of Future CosmosSDK 0.50 object model.
message RequestFinalizeBlock {
  repeated bytes txs = 1;
  tendermint.abci.CommitInfo decided_last_commit = 2 [(gogoproto.nullable) = false];
  repeated tendermint.abci.Misbehavior misbehavior = 3 [(gogoproto.nullable) = false];
  // hash is the merkle root hash of the fields of the decided block.
  bytes hash = 4;
  int64 height = 5;
  google.protobuf.Timestamp time = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
  bytes next_validators_hash = 7;
  // proposer_address is the address of the public key of the original proposer of the block.
  bytes proposer_address = 8;
}

// Implementation of Future CosmosSDK 0.50 object model.
message ResponseFinalizeBlock {
  // set of block events emmitted as part of executing the block
  repeated tendermint.abci.Event events = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "events,omitempty"
  ];
  // the result of executing each transaction including the events
  // the particular transction emitted. This should match the order
  // of the transactions delivered in the block itself
  repeated tendermint.abci.ResponseDeliverTx tx_results = 2;
  // a list of updates to the validator set. These will reflect the validator set at current height + 2.
  repeated tendermint.abci.ValidatorUpdate validator_updates = 3 [(gogoproto.nullable) = false];
  // updates to the consensus params, if any.
  tendermint.types.ConsensusParams consensus_param_updates = 4;
  // app_hash is the hash of the applications' state which is used to confirm that execution of the transactions was deterministic. It is up to the application to decide which algorithm to use.
  bytes app_hash = 5;
}
